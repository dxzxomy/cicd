if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
  print "INFO: Build skipped due to trigger being Branch Indexing"
  currentBuild.result = 'ABORTED' // optional, gives a better hint to the user that it's been skipped, rather than the default which shows it's successful
  return
}
pipeline {
    agent {
       kubernetes {
         //cloud 'kubernetes'
         label 'yinht-api'
         yaml """
             apiVersion: v1
             kind: Pod
             spec:
               imagePullSecrets:
               - name: yinhe-reg
               containers:
               - name: jnlp
                 image: reg.yhroot.com/yinhe-pub/jnlp-slave:3.27-1
               - name: builder
                 imagePullPolicy: Always
                 image: reg.yhroot.com/yinhe-pub/python:3.8-build 
                 command: ['cat']
                 tty: true
               - name: dockerindocker
                 image: reg.yhroot.com/yinhe-pub/dind:17-p1
                 imagePullPolicy: Always
                 command:
                   - sh
                   - -c
                   - dockerd-entrypoint.sh
                 securityContext:
                   privileged: true
                 tty: true
           """
          }
    }
    parameters {
        choice(description: "执行动作", name: "DFLAG",choices: ['只编译镜像','部署镜像'])
        string(name:'SCM_TAG',defaultValue: 'main',description:'代码仓库分支或者tag')
        string(name:'POD_TAG',defaultValue: 'node12',description:'jenkins的label标签')
        string(name:'APP_NAME',defaultValue: '',description:'项目仓库名')
        string(name:'APP_REPO',defaultValue: '',description:'项目仓库地址')
        choice(description: "选择部署环境", name: "DEPLOY_ENV",choices: ['test','beta'])
    }
    environment {
        GITLAB_KEY = 'git-ssh'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconf'
        REGISTRY = 'reg.yhroot.com'
        APP_NAME = "${params.APP_NAME}"
        APP_REPO = "${params.APP_REPO}"
        CICD_BRANCH = 'test'
    }

    stages {
        stage ('checkout cicd repo') { 
            steps {
                dir("${APP_NAME}/cicd-repo") {
                  git credentialsId: "${GITLAB_KEY}", branch: "$BRANCH_NAME", url: 'git@github.com:dxzxomy/cicd.git'
                }
            }
        }
        stage ('checkout config repo') {
            steps {
                dir("${APP_NAME}/config-repo") {
                  git credentialsId: "${GITLAB_KEY}", branch: "$CICD_BRANCH", url: 'git@github.com:dxzxomy/cicd.git'
                }
            }
        }
        stage ("checkout APP  repo") {
            steps {
              dir("${APP_NAME}/") {
                  withCredentials([sshUserPrivateKey(credentialsId: "$GITLAB_KEY", keyFileVariable: 'clonekey', passphraseVariable: '', usernameVariable: 'node')]) {
                     sh "ssh-agent bash -c \"ssh-add $clonekey;export GIT_SSH_COMMAND='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no';git clone $APP_REPO\""
                   }
                  sh 'cp ./cicd-repo/.dockerignore $APP_NAME/'
                  sh 'cd $APP_NAME && git checkout ${SCM_TAG}'
                  script {
                      GIT_COMMIT = sh (
                          script: 'cd $APP_NAME && git rev-parse HEAD',
                          returnStdout: true
                      ).trim()
                  }
                }
            }
         }
       stage('get app and deploy conf') {
           steps {
                dir("$APP_NAME/config-repo") {
                   sh 'ls -alh . && pwd'
                   sh "cp -ra $APP_NAME/config/${DEPLOY_ENV} ../$APP_NAME/apps_config"
                }
           }
       }
        stage('docker build & push') {
            steps {
                container ('dockerindocker') {
                  dir("${APP_NAME}/$APP_NAME") {
                     script {
                         sh "cp ../cicd-repo/$APP_NAME/test/Dockerfile-test Dockerfile-now"
                         docker.withRegistry("https://$REGISTRY", 'harbor') {
                             def customImage = docker.build("satop/$APP_NAME:${SCM_TAG}-${DEPLOY_ENV}-$BUILD_NUMBER","--build-arg GIT_TAG=${SCM_TAG} --build-arg GIT_COMMIT=${GIT_COMMIT} --build-arg appname=${APP_NAME} --build-arg dpenv=${DEPLOY_ENV} -f ./Dockerfile-now .")
                             customImage.push()
                        }
                     }
                  }
                }
                echo "生成的镜像地址：$REGISTRY/satop/$APP_NAME:${SCM_TAG}-${DEPLOY_ENV}-$BUILD_NUMBER"

            }
        }
       stage('deploy to production') {
             when{
               expression{
                 return params.DFLAG =~ /部署镜像/
               }
             }
             steps {
               input(id: 'deploy-to-production', message: 'deploy to production?')
               dir("$APP_NAME/config-repo") {
                   sh "ls -alh ./$APP_NAME/deploy/${DEPLOY_ENV}/"
                   kubernetesDeploy(configs: "$APP_NAME/deploy/${DEPLOY_ENV}/**", enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
               }
             }
        }
  }
}
