if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
  print "INFO: Build skipped due to trigger being Branch Indexing"
  currentBuild.result = 'ABORTED' // optional, gives a better hint to the user that it's been skipped, rather than the default which shows it's successful
  return
}

pipeline {
    agent {
       kubernetes {
         //cloud 'kubernetes'
         label 'node14'
       }
    }
    parameters {
        string(name:'APP_NAME', defaultValue: '', description:'项目名')
        choice(description: "选择pipline模板", name: "PIPE_TEMP",choices: ['nodejs','python'])
        choice(description: "选择部署环境", name: "DEPLOY_ENV", choices: ['test','beta','prod'])
    }
    environment {
        GITLAB_KEY = 'git-ssh'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconf'
        REGISTRY = 'reg.yhroot.com'
        CICD_BRANCH = 'test'
        PIPE_NAME = 'pinp'
    }

    stages {
        stage ('checkout cicd repo') {
            steps {
                dir("${PIPE_NAME}/cicd-repo") {
                  git credentialsId: "${GITLAB_KEY}", branch: "$BRANCH_NAME", url: 'git@github.com:dxzxomy/cicd.git'
                }
            }
        }

        stage ('checkout config repo') {
            steps {
                dir("${PIPE_NAME}/config-repo") {
                  git credentialsId: "${GITLAB_KEY}", branch: "$CICD_BRANCH", url: 'git@github.com:dxzxomy/cicd.git'
                }
            }
        }
        stage ('build pipeline') {
            steps {
                container ('pinp') {
                  dir("${PIPE_NAME}/pinp-repo") {
                      withCredentials([sshUserPrivateKey(credentialsId: "$GITLAB_KEY", keyFileVariable: 'clonekey', passphraseVariable: '', usernameVariable: 'node')]) {
                         sh "ssh-agent bash -c \"ssh-add $clonekey;export GIT_SSH_COMMAND='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no';git clone $APP_REPO\""
                       }
                       sh "ls -ah;sleep 10000"
                  }
                }
            }
        }

       stage('get app and deploy conf') {
           steps {
                dir("$PIPE_NAME/config-repo") {
                   sh 'ls -alh . && pwd'
                   sh "cp -ra $APP_NAME/config/${DEPLOY_ENV} ../$APP_NAME/apps_config"
                }
           }
       }
  }
}
